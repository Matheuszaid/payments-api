name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/constraints.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -c constraints.txt

    - name: Lint with ruff
      run: |
        ruff check app tests
        ruff format --check app tests

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/constraints.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -c constraints.txt

    - name: Run unit and integration tests
      run: |
        pytest tests/unit/ tests/integration/ -v --cov=app --cov-report=xml --cov-report=term-missing

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  e2e:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/constraints.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -c constraints.txt

    - name: Run E2E tests (offline mode)
      run: |
        # Set demo mode for offline testing
        export PAYPAL_MODE=demo_hmac
        export STRIPE_MODE=demo_hmac
        export DEMO_HMAC_SECRET=test_secret_for_ci
        pytest tests/e2e/ -v

  coverage-threshold:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/constraints.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -c constraints.txt

    - name: Check coverage threshold
      run: |
        pytest tests/unit/ tests/integration/ --cov=app --cov-report=term --cov-fail-under=90
        echo "✅ Coverage threshold ≥90% met"

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/constraints.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -c constraints.txt

    - name: Install security tools
      run: |
        pip install pip-audit safety bandit

    - name: Run pip-audit
      run: |
        pip-audit --format=json --output=reports/pip-audit.json --progress-spinner=off || true
        mkdir -p reports

    - name: Run safety check
      run: |
        safety check --json --output reports/safety-report.json || true

    - name: Run bandit security linter
      run: |
        bandit -r app/ -f json -o reports/bandit-report.json || true

    - name: Run Trivy filesystem scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'json'
        output: 'reports/trivy-fs.json'

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: reports/

  build-docker:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Create Dockerfile if not exists
      run: |
        if [ ! -f Dockerfile ]; then
          cat > Dockerfile << 'EOF'
        # Multi-stage Dockerfile for payments-api
        FROM python:3.11-slim as builder

        # Install build dependencies
        RUN apt-get update && apt-get install -y \
            build-essential \
            && rm -rf /var/lib/apt/lists/*

        # Set working directory
        WORKDIR /app

        # Copy requirements first for better caching
        COPY requirements.txt constraints.txt ./

        # Install Python dependencies
        RUN pip install --no-cache-dir --user -r requirements.txt -c constraints.txt

        # Production stage
        FROM python:3.11-slim as production

        # Create non-root user
        RUN groupadd -r appuser && useradd -r -g appuser appuser

        # Install runtime dependencies
        RUN apt-get update && apt-get install -y \
            && rm -rf /var/lib/apt/lists/*

        # Set working directory
        WORKDIR /app

        # Copy Python packages from builder
        COPY --from=builder /root/.local /home/appuser/.local

        # Copy application code
        COPY --chown=appuser:appuser . .

        # Switch to non-root user
        USER appuser

        # Make sure scripts are executable
        ENV PATH=/home/appuser/.local/bin:$PATH

        # Health check
        HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \
          CMD python -c "import requests; requests.get('http://localhost:8065/health')"

        # Expose port
        EXPOSE 8065

        # Run application
        CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8065"]
        EOF
        fi

    - name: Create .dockerignore if not exists
      run: |
        if [ ! -f .dockerignore ]; then
          cat > .dockerignore << 'EOF'
        **/__pycache__
        **/*.pyc
        **/*.pyo
        **/*.pyd
        **/.Python
        **/env
        **/pip-log.txt
        **/pip-delete-this-directory.txt
        **/.tox
        **/.coverage
        **/.coverage.*
        **/.cache
        **/nosetests.xml
        **/coverage.xml
        **/*.cover
        **/*.log
        **/.git
        **/.mypy_cache
        **/.pytest_cache
        **/.hypothesis
        **/htmlcov/
        **/.DS_Store
        **/Thumbs.db
        **/venv/
        **/.venv/
        **/node_modules/
        **/.pytest_cache/
        **/reports/
        EOF
        fi

    - name: Build Docker image
      run: |
        docker build -t payments-api:${{ github.sha }} .
        docker images payments-api:${{ github.sha }} --format "table {{.Repository}}:{{.Tag}}\t{{.Size}}"

    - name: Test Docker image
      run: |
        # Test that the image can start
        docker run --rm -d --name test-container -p 8066:8065 payments-api:${{ github.sha }}
        sleep 10
        # Test health endpoint
        curl -f http://localhost:8066/health || (docker logs test-container && exit 1)
        docker stop test-container

    - name: Save Docker image
      run: |
        docker save payments-api:${{ github.sha }} | gzip > payments-api-image.tar.gz

    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: payments-api-image.tar.gz

  trivy-image:
    runs-on: ubuntu-latest
    needs: build-docker
    steps:
    - uses: actions/checkout@v4

    - name: Download Docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image

    - name: Load Docker image
      run: |
        docker load < payments-api-image.tar.gz

    - name: Run Trivy image scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'payments-api:${{ github.sha }}'
        format: 'json'
        output: 'reports/trivy-image.json'

    - name: Upload Trivy image scan results
      uses: actions/upload-artifact@v3
      with:
        name: trivy-image-results
        path: reports/trivy-image.json

  sbom:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -c constraints.txt
        pip install cyclonedx-bom

    - name: Generate SBOM
      run: |
        mkdir -p reports
        cyclonedx-py -o reports/sbom.json

    - name: Upload SBOM
      uses: actions/upload-artifact@v3
      with:
        name: sbom
        path: reports/sbom.json

  aggregate-reports:
    runs-on: ubuntu-latest
    needs: [coverage-threshold, security, trivy-image, sbom]
    if: always()
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Create summary report
      run: |
        mkdir -p final-reports
        echo "# CI/CD Pipeline Summary" > final-reports/PIPELINE_SUMMARY.md
        echo "" >> final-reports/PIPELINE_SUMMARY.md
        echo "## Build Information" >> final-reports/PIPELINE_SUMMARY.md
        echo "- **Commit:** ${{ github.sha }}" >> final-reports/PIPELINE_SUMMARY.md
        echo "- **Branch:** ${{ github.ref_name }}" >> final-reports/PIPELINE_SUMMARY.md
        echo "- **Build Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> final-reports/PIPELINE_SUMMARY.md
        echo "" >> final-reports/PIPELINE_SUMMARY.md
        echo "## Artifacts Generated" >> final-reports/PIPELINE_SUMMARY.md
        find . -name "*.json" -o -name "*.xml" -o -name "*.tar.gz" | while read file; do
          echo "- \`$file\`" >> final-reports/PIPELINE_SUMMARY.md
        done

    - name: Upload final reports
      uses: actions/upload-artifact@v3
      with:
        name: final-reports
        path: final-reports/
version: '3.8'

services:
  payments-api:
    build: .
    ports:
      - "8065:8065"
    environment:
      - APP_ENV=production
      - DATABASE_URL=sqlite+aiosqlite:///./data/payments.db
      - STRIPE_SIGNING_SECRET=${STRIPE_SIGNING_SECRET}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - PAYPAL_WEBHOOK_ID=${PAYPAL_WEBHOOK_ID}
      - PAYPAL_MODE=${PAYPAL_MODE:-sandbox}
      - DLQ_BACKEND=${DLQ_BACKEND:-db}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8065/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # Optional: Redis for DLQ backend
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    profiles:
      - redis

  # Optional: PostgreSQL database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: payments
      POSTGRES_USER: payments
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-payments_secret}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U payments"]
      interval: 30s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    profiles:
      - postgres

volumes:
  redis_data:
  postgres_data:

# Usage examples:
# docker-compose up                          # SQLite only
# docker-compose --profile redis up         # With Redis DLQ
# docker-compose --profile postgres up      # With PostgreSQL
# docker-compose --profile redis --profile postgres up  # Full stack